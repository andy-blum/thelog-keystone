// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource sqlite {
  url      = env("DATABASE_URL")
  provider = "sqlite"
}

generator client {
  provider   = "prisma-client-js"
  output     = "node_modules/.prisma/client"
  engineType = "binary"
}

model User {
  id       String  @id @default(cuid())
  name     String  @default("")
  email    String  @unique @default("")
  password String
  team     Team?   @relation("Team_owner")
  roles    String?
}

model Contract {
  id                String  @id @default(cuid())
  node_id           Int     @unique
  salary            Int
  years             Int
  status            String
  team              Team?   @relation("Contract_team", fields: [teamId], references: [id])
  teamId            String? @map("team")
  player            Player? @relation("Contract_player", fields: [playerId], references: [id])
  playerId          String? @unique @map("player")
  needsAttention    Boolean @default(false)
  isFranchiseTagged Boolean @default(false)

  @@index([status])
  @@index([teamId])
}

model Player {
  id                    String      @id @default(cuid())
  espn_id               Int         @unique
  name                  String      @default("")
  team                  String      @default("")
  position              String      @default("")
  positionWeight        Int?
  isIrEligible          Boolean     @default(false)
  injuryStatus          String      @default("")
  positionRank          Int?
  overallRank           Int?
  seasonOutlook         String      @default("")
  outlooksByWeek        String?
  isRookie              Boolean     @default(false)
  fullStats             String?
  pointsLastYear        Float?
  pointsThisYear        Float?
  pointsThisYearProj    Float?
  pointsThisWeekProj    Float?
  contract              Contract?   @relation("Contract_player")
  from_Bid_player       Bid[]       @relation("Bid_player")
  from_DraftPick_player DraftPick[] @relation("DraftPick_player")

  @@index([name])
  @@index([position])
  @@index([injuryStatus])
  @@index([pointsLastYear])
  @@index([pointsThisYear])
  @@index([pointsThisYearProj])
  @@index([pointsThisWeekProj])
}

model Team {
  id                   String      @id @default(cuid())
  espn_id              Int         @unique
  name                 String      @default("")
  logo                 String      @default("")
  abbreviation         String      @default("")
  projectedRank        Int?
  playoffSeed          Int?
  wins                 Int?
  losses               Int?
  ties                 Int?
  pointsFor            Float?
  pointsAgainst        Float?
  percentage           Float?
  gamesBack            Float?
  streakLength         Int?
  streakType           String      @default("")
  totalSalary          Int?
  totalYears           Int?
  totalActiveContracts Int?
  totalDTSContracts    Int?
  totalIRContracts     Int?
  totalWaivedContracts Int?
  owner                User?       @relation("Team_owner", fields: [ownerId], references: [id])
  ownerId              String?     @unique @map("owner")
  contracts            Contract[]  @relation("Contract_team")
  from_Bid_team        Bid[]       @relation("Bid_team")
  from_DraftPick_team  DraftPick[] @relation("DraftPick_team")
  from_DraftPick_owner DraftPick[] @relation("DraftPick_owner")
}

model Bid {
  id       String  @id @default(cuid())
  team     Team?   @relation("Bid_team", fields: [teamId], references: [id])
  teamId   String? @map("team")
  player   Player? @relation("Bid_player", fields: [playerId], references: [id])
  playerId String? @map("player")
  salary   Int
  years    Int
  is_dts   Boolean @default(false)

  @@index([teamId])
  @@index([playerId])
}

model DraftPick {
  id       String  @id @default(cuid())
  year     Int
  round    Int
  team     Team?   @relation("DraftPick_team", fields: [teamId], references: [id])
  teamId   String? @map("team")
  owner    Team?   @relation("DraftPick_owner", fields: [ownerId], references: [id])
  ownerId  String? @map("owner")
  player   Player? @relation("DraftPick_player", fields: [playerId], references: [id])
  playerId String? @map("player")

  @@index([teamId])
  @@index([ownerId])
  @@index([playerId])
}