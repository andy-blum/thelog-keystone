# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  team: Team
  roles: String
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  team: TeamWhereInput
  roles: StringNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  roles: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  team: TeamRelateToOneForUpdateInput
  roles: String
}

input TeamRelateToOneForUpdateInput {
  create: TeamCreateInput
  connect: TeamWhereUniqueInput
  disconnect: Boolean
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  team: TeamRelateToOneForCreateInput
  roles: String
}

input TeamRelateToOneForCreateInput {
  create: TeamCreateInput
  connect: TeamWhereUniqueInput
}

type Contract {
  id: ID!
  node_id: Int
  salary: Int
  years: Int
  status: String
  team: Team
  player: Player
  needsAttention: Boolean
  isFranchiseTagged: Boolean
}

input ContractWhereUniqueInput {
  id: ID
  node_id: Int
}

input ContractWhereInput {
  AND: [ContractWhereInput!]
  OR: [ContractWhereInput!]
  NOT: [ContractWhereInput!]
  id: IDFilter
  node_id: IntFilter
  salary: IntFilter
  years: IntFilter
  status: StringFilter
  team: TeamWhereInput
  player: PlayerWhereInput
  needsAttention: BooleanFilter
  isFranchiseTagged: BooleanFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input ContractOrderByInput {
  id: OrderDirection
  node_id: OrderDirection
  salary: OrderDirection
  years: OrderDirection
  status: OrderDirection
  needsAttention: OrderDirection
  isFranchiseTagged: OrderDirection
}

input ContractUpdateInput {
  node_id: Int
  salary: Int
  years: Int
  status: String
  team: TeamRelateToOneForUpdateInput
  player: PlayerRelateToOneForUpdateInput
  needsAttention: Boolean
  isFranchiseTagged: Boolean
}

input PlayerRelateToOneForUpdateInput {
  create: PlayerCreateInput
  connect: PlayerWhereUniqueInput
  disconnect: Boolean
}

input ContractUpdateArgs {
  where: ContractWhereUniqueInput!
  data: ContractUpdateInput!
}

input ContractCreateInput {
  node_id: Int
  salary: Int
  years: Int
  status: String
  team: TeamRelateToOneForCreateInput
  player: PlayerRelateToOneForCreateInput
  needsAttention: Boolean
  isFranchiseTagged: Boolean
}

input PlayerRelateToOneForCreateInput {
  create: PlayerCreateInput
  connect: PlayerWhereUniqueInput
}

type Player {
  id: ID!
  espn_id: Int
  name: String
  team: String
  position: String
  positionWeight: Int
  isIrEligible: Boolean
  injuryStatus: String
  positionRank: Int
  overallRank: Int
  seasonOutlook: String
  outlooksByWeek: JSON
  isRookie: Boolean
  fullStats: JSON
  pointsLastYear: Float
  pointsThisYear: Float
  pointsThisYearProj: Float
  pointsThisWeekProj: Float
  contract: Contract
}

input PlayerWhereUniqueInput {
  id: ID
  espn_id: Int
}

input PlayerWhereInput {
  AND: [PlayerWhereInput!]
  OR: [PlayerWhereInput!]
  NOT: [PlayerWhereInput!]
  id: IDFilter
  espn_id: IntFilter
  name: StringFilter
  team: StringFilter
  position: StringFilter
  positionWeight: IntNullableFilter
  isIrEligible: BooleanFilter
  injuryStatus: StringFilter
  positionRank: IntNullableFilter
  overallRank: IntNullableFilter
  seasonOutlook: StringFilter
  isRookie: BooleanFilter
  pointsLastYear: FloatNullableFilter
  pointsThisYear: FloatNullableFilter
  pointsThisYearProj: FloatNullableFilter
  pointsThisWeekProj: FloatNullableFilter
  contract: ContractWhereInput
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input FloatNullableFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: FloatNullableFilter
}

input PlayerOrderByInput {
  id: OrderDirection
  espn_id: OrderDirection
  name: OrderDirection
  team: OrderDirection
  position: OrderDirection
  positionWeight: OrderDirection
  isIrEligible: OrderDirection
  injuryStatus: OrderDirection
  positionRank: OrderDirection
  overallRank: OrderDirection
  seasonOutlook: OrderDirection
  isRookie: OrderDirection
  pointsLastYear: OrderDirection
  pointsThisYear: OrderDirection
  pointsThisYearProj: OrderDirection
  pointsThisWeekProj: OrderDirection
}

input PlayerUpdateInput {
  espn_id: Int
  name: String
  team: String
  position: String
  positionWeight: Int
  isIrEligible: Boolean
  injuryStatus: String
  positionRank: Int
  overallRank: Int
  seasonOutlook: String
  outlooksByWeek: JSON
  isRookie: Boolean
  fullStats: JSON
  pointsLastYear: Float
  pointsThisYear: Float
  pointsThisYearProj: Float
  pointsThisWeekProj: Float
  contract: ContractRelateToOneForUpdateInput
}

input ContractRelateToOneForUpdateInput {
  create: ContractCreateInput
  connect: ContractWhereUniqueInput
  disconnect: Boolean
}

input PlayerUpdateArgs {
  where: PlayerWhereUniqueInput!
  data: PlayerUpdateInput!
}

input PlayerCreateInput {
  espn_id: Int
  name: String
  team: String
  position: String
  positionWeight: Int
  isIrEligible: Boolean
  injuryStatus: String
  positionRank: Int
  overallRank: Int
  seasonOutlook: String
  outlooksByWeek: JSON
  isRookie: Boolean
  fullStats: JSON
  pointsLastYear: Float
  pointsThisYear: Float
  pointsThisYearProj: Float
  pointsThisWeekProj: Float
  contract: ContractRelateToOneForCreateInput
}

input ContractRelateToOneForCreateInput {
  create: ContractCreateInput
  connect: ContractWhereUniqueInput
}

type Team {
  id: ID!
  espn_id: Int
  name: String
  logo: String
  abbreviation: String
  projectedRank: Int
  playoffSeed: Int
  wins: Int
  losses: Int
  ties: Int
  pointsFor: Float
  pointsAgainst: Float
  percentage: Float
  gamesBack: Float
  streakLength: Int
  streakType: String
  totalSalary: Int
  totalYears: Int
  totalActiveContracts: Int
  totalDTSContracts: Int
  totalIRContracts: Int
  totalWaivedContracts: Int
  owner: User
  contracts(
    where: ContractWhereInput! = {}
    orderBy: [ContractOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Contract!]
  contractsCount(where: ContractWhereInput! = {}): Int
}

input TeamWhereUniqueInput {
  id: ID
  espn_id: Int
}

input TeamWhereInput {
  AND: [TeamWhereInput!]
  OR: [TeamWhereInput!]
  NOT: [TeamWhereInput!]
  id: IDFilter
  espn_id: IntFilter
  name: StringFilter
  logo: StringFilter
  abbreviation: StringFilter
  projectedRank: IntNullableFilter
  playoffSeed: IntNullableFilter
  wins: IntNullableFilter
  losses: IntNullableFilter
  ties: IntNullableFilter
  pointsFor: FloatNullableFilter
  pointsAgainst: FloatNullableFilter
  percentage: FloatNullableFilter
  gamesBack: FloatNullableFilter
  streakLength: IntNullableFilter
  streakType: StringFilter
  totalSalary: IntNullableFilter
  totalYears: IntNullableFilter
  totalActiveContracts: IntNullableFilter
  totalDTSContracts: IntNullableFilter
  totalIRContracts: IntNullableFilter
  totalWaivedContracts: IntNullableFilter
  owner: UserWhereInput
  contracts: ContractManyRelationFilter
}

input ContractManyRelationFilter {
  every: ContractWhereInput
  some: ContractWhereInput
  none: ContractWhereInput
}

input TeamOrderByInput {
  id: OrderDirection
  espn_id: OrderDirection
  name: OrderDirection
  logo: OrderDirection
  abbreviation: OrderDirection
  projectedRank: OrderDirection
  playoffSeed: OrderDirection
  wins: OrderDirection
  losses: OrderDirection
  ties: OrderDirection
  pointsFor: OrderDirection
  pointsAgainst: OrderDirection
  percentage: OrderDirection
  gamesBack: OrderDirection
  streakLength: OrderDirection
  streakType: OrderDirection
  totalSalary: OrderDirection
  totalYears: OrderDirection
  totalActiveContracts: OrderDirection
  totalDTSContracts: OrderDirection
  totalIRContracts: OrderDirection
  totalWaivedContracts: OrderDirection
}

input TeamUpdateInput {
  espn_id: Int
  name: String
  logo: String
  abbreviation: String
  projectedRank: Int
  playoffSeed: Int
  wins: Int
  losses: Int
  ties: Int
  pointsFor: Float
  pointsAgainst: Float
  percentage: Float
  gamesBack: Float
  streakLength: Int
  streakType: String
  totalSalary: Int
  totalYears: Int
  totalActiveContracts: Int
  totalDTSContracts: Int
  totalIRContracts: Int
  totalWaivedContracts: Int
  owner: UserRelateToOneForUpdateInput
  contracts: ContractRelateToManyForUpdateInput
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input ContractRelateToManyForUpdateInput {
  disconnect: [ContractWhereUniqueInput!]
  set: [ContractWhereUniqueInput!]
  create: [ContractCreateInput!]
  connect: [ContractWhereUniqueInput!]
}

input TeamUpdateArgs {
  where: TeamWhereUniqueInput!
  data: TeamUpdateInput!
}

input TeamCreateInput {
  espn_id: Int
  name: String
  logo: String
  abbreviation: String
  projectedRank: Int
  playoffSeed: Int
  wins: Int
  losses: Int
  ties: Int
  pointsFor: Float
  pointsAgainst: Float
  percentage: Float
  gamesBack: Float
  streakLength: Int
  streakType: String
  totalSalary: Int
  totalYears: Int
  totalActiveContracts: Int
  totalDTSContracts: Int
  totalIRContracts: Int
  totalWaivedContracts: Int
  owner: UserRelateToOneForCreateInput
  contracts: ContractRelateToManyForCreateInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input ContractRelateToManyForCreateInput {
  create: [ContractCreateInput!]
  connect: [ContractWhereUniqueInput!]
}

type Bid {
  id: ID!
  team: Team
  player: Player
  salary: Int
  years: Int
  is_dts: Boolean
}

input BidWhereUniqueInput {
  id: ID
}

input BidWhereInput {
  AND: [BidWhereInput!]
  OR: [BidWhereInput!]
  NOT: [BidWhereInput!]
  id: IDFilter
  team: TeamWhereInput
  player: PlayerWhereInput
  salary: IntFilter
  years: IntFilter
  is_dts: BooleanFilter
}

input BidOrderByInput {
  id: OrderDirection
  salary: OrderDirection
  years: OrderDirection
  is_dts: OrderDirection
}

input BidUpdateInput {
  team: TeamRelateToOneForUpdateInput
  player: PlayerRelateToOneForUpdateInput
  salary: Int
  years: Int
  is_dts: Boolean
}

input BidUpdateArgs {
  where: BidWhereUniqueInput!
  data: BidUpdateInput!
}

input BidCreateInput {
  team: TeamRelateToOneForCreateInput
  player: PlayerRelateToOneForCreateInput
  salary: Int
  years: Int
  is_dts: Boolean
}

type DraftPick {
  id: ID!
  year: Int
  round: Int
  team: Team
  owner: Team
  player: Player
}

input DraftPickWhereUniqueInput {
  id: ID
}

input DraftPickWhereInput {
  AND: [DraftPickWhereInput!]
  OR: [DraftPickWhereInput!]
  NOT: [DraftPickWhereInput!]
  id: IDFilter
  year: IntFilter
  round: IntFilter
  team: TeamWhereInput
  owner: TeamWhereInput
  player: PlayerWhereInput
}

input DraftPickOrderByInput {
  id: OrderDirection
  year: OrderDirection
  round: OrderDirection
}

input DraftPickUpdateInput {
  year: Int
  round: Int
  team: TeamRelateToOneForUpdateInput
  owner: TeamRelateToOneForUpdateInput
  player: PlayerRelateToOneForUpdateInput
}

input DraftPickUpdateArgs {
  where: DraftPickWhereUniqueInput!
  data: DraftPickUpdateInput!
}

input DraftPickCreateInput {
  year: Int
  round: Int
  team: TeamRelateToOneForCreateInput
  owner: TeamRelateToOneForCreateInput
  player: PlayerRelateToOneForCreateInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createContract(data: ContractCreateInput!): Contract
  createContracts(data: [ContractCreateInput!]!): [Contract]
  updateContract(
    where: ContractWhereUniqueInput!
    data: ContractUpdateInput!
  ): Contract
  updateContracts(data: [ContractUpdateArgs!]!): [Contract]
  deleteContract(where: ContractWhereUniqueInput!): Contract
  deleteContracts(where: [ContractWhereUniqueInput!]!): [Contract]
  createPlayer(data: PlayerCreateInput!): Player
  createPlayers(data: [PlayerCreateInput!]!): [Player]
  updatePlayer(where: PlayerWhereUniqueInput!, data: PlayerUpdateInput!): Player
  updatePlayers(data: [PlayerUpdateArgs!]!): [Player]
  deletePlayer(where: PlayerWhereUniqueInput!): Player
  deletePlayers(where: [PlayerWhereUniqueInput!]!): [Player]
  createTeam(data: TeamCreateInput!): Team
  createTeams(data: [TeamCreateInput!]!): [Team]
  updateTeam(where: TeamWhereUniqueInput!, data: TeamUpdateInput!): Team
  updateTeams(data: [TeamUpdateArgs!]!): [Team]
  deleteTeam(where: TeamWhereUniqueInput!): Team
  deleteTeams(where: [TeamWhereUniqueInput!]!): [Team]
  createBid(data: BidCreateInput!): Bid
  createBids(data: [BidCreateInput!]!): [Bid]
  updateBid(where: BidWhereUniqueInput!, data: BidUpdateInput!): Bid
  updateBids(data: [BidUpdateArgs!]!): [Bid]
  deleteBid(where: BidWhereUniqueInput!): Bid
  deleteBids(where: [BidWhereUniqueInput!]!): [Bid]
  createDraftPick(data: DraftPickCreateInput!): DraftPick
  createDraftPicks(data: [DraftPickCreateInput!]!): [DraftPick]
  updateDraftPick(
    where: DraftPickWhereUniqueInput!
    data: DraftPickUpdateInput!
  ): DraftPick
  updateDraftPicks(data: [DraftPickUpdateArgs!]!): [DraftPick]
  deleteDraftPick(where: DraftPickWhereUniqueInput!): DraftPick
  deleteDraftPicks(where: [DraftPickWhereUniqueInput!]!): [DraftPick]
  endSession: Boolean!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  contracts(
    where: ContractWhereInput! = {}
    orderBy: [ContractOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Contract!]
  contract(where: ContractWhereUniqueInput!): Contract
  contractsCount(where: ContractWhereInput! = {}): Int
  players(
    where: PlayerWhereInput! = {}
    orderBy: [PlayerOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Player!]
  player(where: PlayerWhereUniqueInput!): Player
  playersCount(where: PlayerWhereInput! = {}): Int
  teams(
    where: TeamWhereInput! = {}
    orderBy: [TeamOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Team!]
  team(where: TeamWhereUniqueInput!): Team
  teamsCount(where: TeamWhereInput! = {}): Int
  bids(
    where: BidWhereInput! = {}
    orderBy: [BidOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Bid!]
  bid(where: BidWhereUniqueInput!): Bid
  bidsCount(where: BidWhereInput! = {}): Int
  draftPicks(
    where: DraftPickWhereInput! = {}
    orderBy: [DraftPickOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [DraftPick!]
  draftPick(where: DraftPickWhereUniqueInput!): DraftPick
  draftPicksCount(where: DraftPickWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
